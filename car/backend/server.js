const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');

const app = express();
const port = 4000; // <--- –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–ê –°–¢–†–û–ö–ê –ù–ï –£–î–ê–õ–ï–ù–ê –ò –ù–ï –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏)
const pool = new Pool({
    user: 'postgres', 
    host: 'localhost',
    database: 'car_market', 
    password: 'gbdjvfy666', 
    port: 5432,
});

async function getFormattedBrands() {
    try {
        // --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô SQL-–ó–ê–ü–†–û–° ---
        // –û–Ω —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç slug –∏–∑ —Ç–∞–±–ª–∏—Ü—ã brands —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ cars.brand, –ø—Ä–∏–≤–æ–¥—è –æ–±–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.
        const sqlQuery = `
            SELECT 
                b.name, 
                b.slug, 
                b.img_src, 
                b.country_group,
                COUNT(c.id) AS car_count
            FROM 
                brands b
            LEFT JOIN 
                cars c ON LOWER(b.slug) = LOWER(c.brand)
            GROUP BY 
                b.name, b.slug, b.img_src, b.country_group
            ORDER BY 
                b.country_group, b.name;
        `;
        
        const result = await pool.query(sqlQuery);
        const formattedData = {};

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ (country_group)
        for (const row of result.rows) {
            const { country_group, name, slug, car_count, img_src } = row;
            const countryKey = country_group.toLowerCase(); // 'chinese', 'european' –∏ —Ç.–¥.

            if (!formattedData[countryKey]) {
                formattedData[countryKey] = {
                    title: country_group.charAt(0).toUpperCase() + country_group.slice(1), 
                    brands: []
                };
            }
            
            formattedData[countryKey].brands.push({
                name,
                slug,
                count: parseInt(car_count, 10), 
                imgSrc: img_src
            });
        }

        return formattedData;

    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:', err);
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã app.get –º–æ–≥ –µ–µ –ø–æ–π–º–∞—Ç—å
    }
}


// ====================================================================
// API ROUTE: /api/brands (–ì–ª–∞–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
// ====================================================================

app.get('/api/brands', async (req, res) => {
    try {
        const data = await getFormattedBrands();
        res.json(data);
    } catch (err) {
        res.status(500).json({ error: 'Failed to fetch brands from database' });
    }
});


// ====================================================================
// API ROUTE: /api/brands/:brandSlug (–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞)
// –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏ URL –ª–æ–≥–æ—Ç–∏–ø–∞.
// ====================================================================

app.get('/api/brands/:brandSlug', async (req, res) => {
    try {
        const { brandSlug } = req.params;
        // –ó–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ URL –ª–æ–≥–æ—Ç–∏–ø–∞
        const query = 'SELECT name, slug, img_src FROM brands WHERE LOWER(slug) = LOWER($1)';
        const { rows } = await pool.query(query, [brandSlug]);
        
        if (rows.length === 0) {
            // –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            return res.status(404).json({ message: '–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
        res.json(rows[0]); 
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–µ–Ω–¥–∞ –∏–∑ –ë–î:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


// ====================================================================
// API ROUTE: /api/cars/:brandSlug (–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π)
// ====================================================================

app.get('/api/cars/:brandSlug', async (req, res) => {
    try {
        const { brandSlug } = req.params;
        const query = 'SELECT * FROM cars WHERE LOWER(brand) = LOWER($1)';
        const { rows } = await pool.query(query, [brandSlug]);
        
        // –í–ù–ò–ú–ê–ù–ò–ï: –í –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ cars –ø–æ–ª–µ brand, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç slug –∏–ª–∏ –∏–º—è.
        // –Ø –∏—Å–ø–æ–ª—å–∑—É—é LOWER(brand) = LOWER($1) –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.
        
        res.json(rows);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω –±—Ä–µ–Ω–¥–∞ –∏–∑ –ë–î:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


// ====================================================================
// API ROUTE: /api/car/:id (–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã –ø–æ ID)
// ====================================================================

app.get('/api/car/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { rows } = await pool.query('SELECT * FROM cars WHERE id = $1', [id]);
        
        if (rows.length === 0) {
            return res.status(404).json({ message: '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        res.json(rows[0]);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã –∏–∑ –ë–î:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});


// ====================================================================
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ====================================================================

app.listen(port, () => {
    console.log(`\nüöÄ –ë—ç–∫–µ–Ω–¥-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log(`API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${port}/api/brands`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
pool.connect()
  .then(() => console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL'))
  .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.stack));
