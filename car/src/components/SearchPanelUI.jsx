import React, { useState, useEffect, useRef } from 'react';
import styles from './SearchPanelUI.module.css';

// –î–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∞—Ö –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è isHovered
const initialFilterData = [
    { name: '–í—Å–µ', count: 1488, angle: 0, flagImage: '' }, 
    { name: '–ì–µ—Ä–º–∞–Ω–∏—è', count: 320, angle: 60, flagImage: 'https://upload.wikimedia.org/wikipedia/commons/b/ba/Flag_of_Germany.svg' }, 
    { name: '–Ø–ø–æ–Ω–∏—è', count: 512, angle: 120, flagImage: 'https://upload.wikimedia.org/wikipedia/commons/9/9e/Flag_of_Japan.svg' },
    { name: '–ö–æ—Ä–µ—è', count: 250, angle: 180, flagImage: 'https://upload.wikimedia.org/wikipedia/commons/0/09/Flag_of_South_Korea.svg' }, 
    { name: '–ö–∏—Ç–∞–π', count: 310, angle: 240, flagImage: 'https://upload.wikimedia.org/wikipedia/commons/f/fa/Flag_of_the_People%27s_Republic_of_China.svg' }, 
    { name: '–°–®–ê', count: 96, angle: 300, flagImage: 'https://upload.wikimedia.org/wikipedia/commons/a/a4/Flag_of_the_United_States.svg' }
];


const SearchPanelUI = () => {
    const [angle, setAngle] = useState(0);
    const [filterIndex, setFilterIndex] = useState(0);
    const [foundCount, setFoundCount] = useState(1488); 
    
    const rotRef = useRef(null);
    const loadingBarRef = useRef(null);

    useEffect(() => {
        if (rotRef.current) {
            const step = 2;
            const color1 = 'rgba(0,0,0,0.5)';
            const color2 = 'rgba(0,0,0,0.1)';
            let gradient = 'conic-gradient(';
            for (let i = 0; i < 360; i += step) {
                const color = i % (2 * step) === 0 ? color1 : color2;
                gradient += `${color} ${i}deg, `;
            }
            gradient = gradient.slice(0, -2) + '), rgb(85 93 108)';
            rotRef.current.style.background = gradient;
        }
    }, []);

    const handleCountrySelect = (index) => {
        let targetAngle = initialFilterData[index].angle;

        const currentRotation = angle - (angle % 360);
        if (targetAngle < (angle % 360)) {
            targetAngle += 360;
        }

        const newAngle = currentRotation + targetAngle;

        setAngle(newAngle);
        setFilterIndex(index);
        setFoundCount(initialFilterData[index].count); 
        
        if (loadingBarRef.current) {
            loadingBarRef.current.classList.remove(styles.active);
            void loadingBarRef.current.offsetWidth;
            loadingBarRef.current.classList.add(styles.active);
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
    const handleAction1Click = () => { console.log("–î–µ–π—Å—Ç–≤–∏–µ 1: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"); };
    const handleAction2Click = () => { console.log("–î–µ–π—Å—Ç–≤–∏–µ 2: –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"); };
    const handleAction3Click = () => { console.log("–î–µ–π—Å—Ç–≤–∏–µ 3: –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"); };

    return (
        <div className={styles.searchPanelContainer}>
            <div className={styles.outerRim}>
                <div className={styles.outerRim2}>
                    <div className={styles.innerRim}>

                        <div className={styles.searchFormContainer}>
                           <div className={styles.formFields}>
                                <h3>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è</h3>
                                <div className={styles.inputGroup}>
                                    <input type="text" placeholder="–ú–∞—Ä–∫–∞" />
                                    <input type="text" placeholder="–ú–æ–¥–µ–ª—å" />
                                </div>
                                <div className={styles.inputGroup}>
                                    <input type="text" placeholder="–ì–æ–¥ –æ—Ç" />
                                    <input type="text" placeholder="–ë—é–¥–∂–µ—Ç –¥–æ, $" />
                                </div>
                                <button className={styles.searchButton}>–ù–∞–π—Ç–∏</button>
                           </div>
                           
                           <div className={styles.actionButtonsContainer}>
                                <div className={styles.actionButton} onClick={handleAction1Click}>
                                    <p>üîç</p><span>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</span>
                                </div>
                                <div className={styles.actionButton} onClick={handleAction2Click}>
                                    <p>‚ôªÔ∏è</p><span>–°–±—Ä–æ—Å–∏—Ç—å</span>
                                </div>
                                <div className={styles.actionButton} onClick={handleAction3Click}>
                                    <p>‚ù§Ô∏è</p><span>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                                </div>
                           </div>
                        </div>
                        
                        <div className={styles.controlPanel}>
                            <div className={styles.window}>
                                <div className={styles.windowRounded}>
                                    <div className={styles.rightDisplayBlock}>
                                        <p className={styles.label}>–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ</p>
                                        <div className={styles.screen}>
                                            <p className={styles.countDisplay}>
                                                {foundCount}
                                            </p>
                                        </div>
                                        <div className={`${styles.toggle} ${styles.active}`}>–ù–æ–≤—ã–µ</div>
                                        <div className={`${styles.toggle} ${styles.two}`}>–ë/–£</div>
                                    </div>

                                    {/* –ë–û–ö–û–í–´–ï –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¶–ò–§–ï–†–ë–õ–ê–¢–û–ú (–£–ü–†–û–©–ï–ù–ù–ê–Ø –†–ê–ó–ú–ï–¢–ö–ê) */}
                                    <div className={styles.countryButtonsLeft}>
                                        {initialFilterData.slice(4).reverse().map((country, index) => {
                                            const i = 5 - index; // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –≤ initialFilterData
                                            return (
                                                <button 
                                                    key={country.name}
                                                    className={`${styles.countryButton} ${filterIndex === i ? styles.active : ''}`}
                                                    onClick={() => handleCountrySelect(i)}
                                                    style={{ 
                                                        '--flag-url': `url(${country.flagImage})`
                                                    }}
                                                >
                                                    {country.name}
                                                </button>
                                            );
                                        })}
                                    </div>
                                    <div className={styles.countryButtonsRight}>
                                        {initialFilterData.slice(1, 4).map((country, index) => {
                                             const i = index + 1; // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –≤ initialFilterData
                                            return (
                                                <button 
                                                    key={country.name}
                                                    className={`${styles.countryButton} ${filterIndex === i ? styles.active : ''}`}
                                                    onClick={() => handleCountrySelect(i)}
                                                    style={{ 
                                                        '--flag-url': `url(${country.flagImage})`
                                                    }}
                                                >
                                                    {country.name}
                                                </button>
                                            );
                                        })}
                                    </div>
                                    
                                    <div className={styles.backCircle}></div>
                                    <div className={styles.circle} ref={rotRef} style={{ transform: `translate(-50%, -50%) rotate(${angle}deg)` }}></div>
                                    <div className={styles.innerCircle}>
                                        <div className={styles.dialLabel}>{initialFilterData[filterIndex].name}</div>
                                    </div>
                                    
                                    <div className={styles.loadingBar} ref={loadingBarRef}>
                                        <div></div><div></div><div></div><div></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default SearchPanelUI;