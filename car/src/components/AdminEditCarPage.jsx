import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

const API_URL = 'http://localhost:4000/api';

const AdminEditCarPage = () => {
    const { id } = useParams(); 
    const navigate = useNavigate();

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
    const [carData, setCarData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null); 
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
    const [formData, setFormData] = useState(null);
    const [isSaving, setIsSaving] = useState(false);
    const [saveMessage, setSaveMessage] = useState({ type: '', text: '' });


    // =========================================================
    // 1. –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
    // =========================================================
    useEffect(() => {
        const fetchCarData = async () => {
            if (!id) {
                setError('ID –º–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL.');
                setLoading(false);
                return;
            }
            
            try {
                // GET-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                const response = await axios.get(`${API_URL}/car/${id}`);
                const data = response.data;
                
                // –í–ê–ñ–ù–û: –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                setCarData(data);
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSONB –ø–æ–ª—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã textarea —Ä–∞–±–æ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                setFormData({
                    ...data,
                    images: JSON.stringify(data.images || [], null, 2),
                    options: JSON.stringify(data.options || {}, null, 2),
                    characteristics: JSON.stringify(data.characteristics || {}, null, 2),
                    accessories: JSON.stringify(data.accessories || {}, null, 2),
                    other_trims: JSON.stringify(data.other_trims || [], null, 2),
                    colors: JSON.stringify(data.colors || [], null, 2),
                    specs: JSON.stringify(data.specs || {}, null, 2),
                });
                
            } catch (err) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã:", err);
                if (err.response) {
                    setError(`–û—à–∏–±–∫–∞ ${err.response.status}: ${err.response.data.message || '–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'}`);
                } else {
                    setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Node.js —Å–µ—Ä–≤–µ—Ä.');
                }
            } finally {
                setLoading(false);
            }
        };

        fetchCarData();
    }, [id]);

    // =========================================================
    // 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–ú–ï–ù–ï–ù–ò–ô –§–û–†–ú–´
    // =========================================================
    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        
        setFormData(prevData => ({
            ...prevData,
            [name]: type === 'checkbox' ? checked : value
        }));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        setSaveMessage({ type: '', text: '' });
    };

    // =========================================================
    // 3. –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú–´ (PUT-–ó–ê–ü–†–û–°)
    // =========================================================
    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsSaving(true);
        setSaveMessage({ type: '', text: '' });
        
        try {
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å JSON-—Å—Ç—Ä–æ–∫–∏
            const dataToSubmit = { ...formData };
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è PostgreSQL JSONB
            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º try/catch –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
            try {
                dataToSubmit.images = JSON.parse(formData.images);
                dataToSubmit.options = JSON.parse(formData.options);
                dataToSubmit.characteristics = JSON.parse(formData.characteristics);
                dataToSubmit.accessories = JSON.parse(formData.accessories);
                dataToSubmit.other_trims = JSON.parse(formData.other_trims);
                dataToSubmit.colors = JSON.parse(formData.colors);
                dataToSubmit.specs = JSON.parse(formData.specs);
            } catch (jsonError) {
                setSaveMessage({ type: 'error', text: '–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç –≤ –æ–¥–Ω–æ–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (images, options –∏ —Ç.–¥.).' });
                setIsSaving(false);
                return; 
            }
            
            // PUT-–∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É API
            const response = await axios.put(`${API_URL}/car/${id}`, dataToSubmit);
            
            setSaveMessage({ type: 'success', text: response.data.message });
            
            // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å carData –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setCarData(response.data.car); 

        } catch (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
            const errorMessage = err.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ —Å–µ—Ç–∏.';
            setSaveMessage({ type: 'error', text: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${errorMessage}` });
        } finally {
            setIsSaving(false);
        }
    };


    // =========================================================
    // 4. –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–¢–†–ê–ù–ò–¶–´
    // =========================================================
    if (loading) {
        return <div style={styles.message(null)}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ID: {id}...</div>;
    }

    if (error) {
        return <div style={styles.errorBox}>
            <h2>üõë –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—à–∏–Ω—ã</h2>
            <p style={{fontWeight: 'bold'}}>ID –∏–∑ URL: {id}</p>
            <p>{error}</p>
        </div>;
    }

    if (!formData) {
        return <div style={styles.message('warning')}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</div>;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–ª–µ–π
    const InputField = ({ label, name, type = 'text', value, onChange, placeholder, isRequired = false }) => (
        <div style={styles.formGroup}>
            <label style={styles.label}>{label}{isRequired && <span style={{color: 'red'}}>*</span>}:</label>
            <input
                style={styles.input}
                type={type}
                name={name}
                value={value || (type === 'number' ? '' : '')}
                onChange={onChange}
                placeholder={placeholder}
                required={isRequired}
                min={type === 'number' ? 0 : undefined}
            />
        </div>
    );
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è JSON/–±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    const TextAreaField = ({ label, name, value, onChange }) => (
        <div style={styles.formGroup}>
            <label style={styles.label}>{label}:</label>
            <textarea
                style={styles.textArea}
                name={name}
                value={value || ''}
                onChange={onChange}
            />
            <small style={{ color: '#666' }}>–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON. –î–ª–∏–Ω–∞: {value ? value.length : 0}</small>
        </div>
    );
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    const SaveNotification = ({ type, text }) => {
        if (!text) return null;
        const color = type === 'success' ? '#28a745' : '#dc3545';
        const bgColor = type === 'success' ? '#d4edda' : '#f8d7da';
        
        return (
            <div style={{...styles.notification, backgroundColor: bgColor, color: color}}>
                {text}
            </div>
        );
    };

    return (
        <div style={styles.container}>
            <h1 style={styles.header}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {carData?.name || '–ê–≤—Ç–æ–º–æ–±–∏–ª—å'} (ID: {id})</h1>
            
            <SaveNotification type={saveMessage.type} text={saveMessage.text} />
            
            <form onSubmit={handleSubmit} style={styles.form}>
                
                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <div style={styles.actionButtons}>
                    <button 
                        type="submit" 
                        style={styles.saveButton} 
                        disabled={isSaving}
                    >
                        {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                    </button>
                    <button 
                        type="button" 
                        onClick={() => navigate('/admin')} 
                        style={styles.backButton}
                    >
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
                    </button>
                </div>
                
                <h2 style={styles.sectionHeader}>–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è</h2>
                <div style={styles.grid}>
                    <InputField label="–ë—Ä–µ–Ω–¥ (brand)" name="brand" value={formData.brand} onChange={handleChange} />
                    <InputField label="–ú–æ–¥–µ–ª—å (model)" name="model" value={formData.model} onChange={handleChange} />
                    <InputField label="–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (name)" name="name" value={formData.name} onChange={handleChange} isRequired={true} />
                    <InputField label="–ì–æ–¥ (year)" name="year" type="number" value={formData.year} onChange={handleChange} />
                    <InputField label="–ü—Ä–æ–±–µ–≥ (mileage)" name="mileage" type="number" value={formData.mileage} onChange={handleChange} />
                    <InputField label="–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ (origin)" name="origin" value={formData.origin} onChange={handleChange} />
                    <InputField label="–¢–∏–ø –∫—É–∑–æ–≤–∞ (body_type)" name="body_type" value={formData.body_type} onChange={handleChange} />
                    <InputField label="–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è (engine_type)" name="engine_type" value={formData.engine_type} onChange={handleChange} />
                </div>

                <h2 style={styles.sectionHeader}>–¶–µ–Ω—ã</h2>
                <div style={styles.grid}>
                    <InputField label="–¶–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–∏ (RUB)" name="price_russia" type="number" value={formData.price_russia} onChange={handleChange} isRequired={true} />
                    <InputField label="–¶–µ–Ω–∞ –≤ –ö–∏—Ç–∞–µ (CNY)" name="price_china" type="number" value={formData.price_china} onChange={handleChange} />
                    <div /> {/* –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
                </div>
                
                <h2 style={styles.sectionHeader}>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
                <div style={styles.grid}>
                    <InputField label="–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (transmission)" name="transmission" value={formData.transmission} onChange={handleChange} />
                    <InputField label="–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞ (drivetrain)" name="drivetrain" value={formData.drivetrain} onChange={handleChange} />
                    <InputField label="–ú–æ—â–Ω–æ—Å—Ç—å (max_power_ps)" name="max_power_ps" type="number" value={formData.max_power_ps} onChange={handleChange} />
                    <InputField label="–ú–æ–º–µ–Ω—Ç (max_torque_nm)" name="max_torque_nm" type="number" value={formData.max_torque_nm} onChange={handleChange} />
                    <InputField label="–û–±—ä–µ–º/–ï–º–∫–æ—Å—Ç—å (displacement)" name="displacement" value={formData.displacement} onChange={handleChange} />
                    <InputField label="–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (max_speed_kmh)" name="max_speed_kmh" type="number" value={formData.max_speed_kmh} onChange={handleChange} />
                    <InputField label="–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (fuel_type)" name="fuel_type" value={formData.fuel_type} onChange={handleChange} />
                    <InputField label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (seats)" name="seats" type="number" value={formData.seats} onChange={handleChange} />
                </div>
                
                <h2 style={styles.sectionHeader}>JSON –∏ –º–∞—Å—Å–∏–≤—ã (–¢—Ä–µ–±—É—é—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON)</h2>
                <div style={styles.gridJson}>
                    <TextAreaField label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (images: Array)" name="images" value={formData.images} onChange={handleChange} />
                    <TextAreaField label="–û–ø—Ü–∏–∏ (options: Object)" name="options" value={formData.options} onChange={handleChange} />
                    <TextAreaField label="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (characteristics: Object)" name="characteristics" value={formData.characteristics} onChange={handleChange} />
                    <TextAreaField label="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã (accessories: Object)" name="accessories" value={formData.accessories} onChange={handleChange} />
                    <TextAreaField label="–î—Ä—É–≥–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ (other_trims: Array)" name="other_trims" value={formData.other_trims} onChange={handleChange} />
                    <TextAreaField label="–¶–≤–µ—Ç–∞ (colors: Array)" name="colors" value={formData.colors} onChange={handleChange} />
                    <TextAreaField label="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (specs: Object)" name="specs" value={formData.specs} onChange={handleChange} />
                </div>
                
                {/* –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
                <div style={styles.actionButtons}>
                    <button 
                        type="submit" 
                        style={styles.saveButton} 
                        disabled={isSaving}
                    >
                        {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                    </button>
                </div>
                
            </form>
        </div>
    );
};

const styles = {
    container: { padding: '20px', maxWidth: '1400px', margin: '0 auto', fontFamily: 'Inter, sans-serif' },
    header: { borderBottom: '2px solid #333', paddingBottom: '10px', marginBottom: '30px' },
    form: { display: 'flex', flexDirection: 'column', gap: '20px' },
    grid: { display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '20px' },
    gridJson: { display: 'grid', gridTemplateColumns: '1fr', gap: '20px' },
    formGroup: { display: 'flex', flexDirection: 'column' },
    label: { marginBottom: '5px', fontWeight: '600', color: '#333' },
    input: { padding: '10px', border: '1px solid #ccc', borderRadius: '4px', transition: 'border-color 0.2s' },
    textArea: { padding: '10px', border: '1px solid #ccc', borderRadius: '4px', minHeight: '150px', fontFamily: 'Consolas, monospace' },
    sectionHeader: { marginTop: '30px', borderBottom: '1px solid #ddd', paddingBottom: '5px', color: '#007bff' },
    actionButtons: { display: 'flex', gap: '15px', marginTop: '20px', marginBottom: '20px', padding: '10px', borderTop: '1px solid #eee' },
    saveButton: { padding: '12px 25px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', fontWeight: 'bold', transition: 'background-color 0.2s', boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)' },
    backButton: { padding: '12px 25px', backgroundColor: '#6c757d', color: 'white', border: 'none', borderRadius: '8px', cursor: 'pointer', transition: 'background-color 0.2s' },
    notification: { padding: '15px', borderRadius: '8px', fontWeight: 'bold', margin: '15px 0' },
    errorBox: { padding: '20px', color: 'red', border: '1px solid red', margin: '20px', borderRadius: '8px' },
    message: (type) => ({ 
        padding: '20px', 
        color: type === 'warning' ? 'orange' : '#007bff', 
        fontSize: '1.2em' 
    })
};

export default AdminEditCarPage;
